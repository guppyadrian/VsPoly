// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_LockFlushedOption
#include <LockFlushedOption.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb9f9ff07add6c65_466_new,"LockFlushedOption","new",0x37fcb05f,"LockFlushedOption.new","Options.hx",466,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_fb9f9ff07add6c65_472_press,"LockFlushedOption","press",0xe4287142,"LockFlushedOption.press","Options.hx",472,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_fb9f9ff07add6c65_479_updateDisplay,"LockFlushedOption","updateDisplay",0xfd5b03f8,"LockFlushedOption.updateDisplay","Options.hx",479,0x9d9a0240)

void LockFlushedOption_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_fb9f9ff07add6c65_466_new)
HXLINE( 467)		super::__construct();
HXLINE( 468)		this->description = desc;
            	}

Dynamic LockFlushedOption_obj::__CreateEmpty() { return new LockFlushedOption_obj; }

void *LockFlushedOption_obj::_hx_vtable = 0;

Dynamic LockFlushedOption_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LockFlushedOption_obj > _hx_result = new LockFlushedOption_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool LockFlushedOption_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x7f7b3481;
	}
}

bool LockFlushedOption_obj::press(){
            	HX_STACKFRAME(&_hx_pos_fb9f9ff07add6c65_472_press)
HXLINE( 473)		::flixel::FlxG_obj::save->data->__SetField(HX_("flushedUnlocked",66,3f,22,bb),false,::hx::paccDynamic);
HXLINE( 474)		return true;
            	}


::String LockFlushedOption_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_fb9f9ff07add6c65_479_updateDisplay)
HXDLIN( 479)		::String _hx_tmp;
HXDLIN( 479)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flushedUnlocked",66,3f,22,bb),::hx::paccDynamic)) )) {
HXDLIN( 479)			_hx_tmp = HX_("unlocked",23,34,0e,5c);
            		}
            		else {
HXDLIN( 479)			_hx_tmp = HX_("locked",0a,05,c7,59);
            		}
HXDLIN( 479)		return (HX_("Flushed ",bd,66,ba,72) + _hx_tmp);
            	}



::hx::ObjectPtr< LockFlushedOption_obj > LockFlushedOption_obj::__new(::String desc) {
	::hx::ObjectPtr< LockFlushedOption_obj > __this = new LockFlushedOption_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< LockFlushedOption_obj > LockFlushedOption_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	LockFlushedOption_obj *__this = (LockFlushedOption_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LockFlushedOption_obj), true, "LockFlushedOption"));
	*(void **)__this = LockFlushedOption_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

LockFlushedOption_obj::LockFlushedOption_obj()
{
}

::hx::Val LockFlushedOption_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"press") ) { return ::hx::Val( press_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LockFlushedOption_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *LockFlushedOption_obj_sStaticStorageInfo = 0;
#endif

static ::String LockFlushedOption_obj_sMemberFields[] = {
	HX_("press",83,53,88,c8),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class LockFlushedOption_obj::__mClass;

void LockFlushedOption_obj::__register()
{
	LockFlushedOption_obj _hx_dummy;
	LockFlushedOption_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("LockFlushedOption",ed,94,ef,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LockFlushedOption_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LockFlushedOption_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LockFlushedOption_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LockFlushedOption_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

