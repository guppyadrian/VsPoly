// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c466427e4f3e0023_4_CalculateRating,"Ratings","CalculateRating",0x7423532b,"Ratings.CalculateRating","Ratings.hx",4,0x142ad6e8)

void Ratings_obj::__construct() { }

Dynamic Ratings_obj::__CreateEmpty() { return new Ratings_obj; }

void *Ratings_obj::_hx_vtable = 0;

Dynamic Ratings_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Ratings_obj > _hx_result = new Ratings_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Ratings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07eb05f2;
}

::String Ratings_obj::CalculateRating(Float noteDiff, ::Dynamic customSafeZone){
            	HX_STACKFRAME(&_hx_pos_c466427e4f3e0023_4_CalculateRating)
HXLINE(   6)		Float customTimeScale = ::Conductor_obj::timeScale;
HXLINE(   8)		if (::hx::IsNotNull( customSafeZone )) {
HXLINE(   9)			customTimeScale = (( (Float)(customSafeZone) ) / ( (Float)(166) ));
            		}
HXLINE(  16)		if ((noteDiff > (( (Float)(135) ) * customTimeScale))) {
HXLINE(  17)			return HX_("shit",c0,cf,52,4c);
            		}
            		else {
HXLINE(  18)			if ((noteDiff > (( (Float)(90) ) * customTimeScale))) {
HXLINE(  19)				return HX_("bad",c5,b1,4a,00);
            			}
            			else {
HXLINE(  20)				if ((noteDiff > (( (Float)(45) ) * customTimeScale))) {
HXLINE(  21)					return HX_("good",3d,95,69,44);
            				}
            				else {
HXLINE(  22)					if ((noteDiff < (( (Float)(-45) ) * customTimeScale))) {
HXLINE(  23)						return HX_("good",3d,95,69,44);
            					}
            					else {
HXLINE(  24)						if ((noteDiff < (( (Float)(-90) ) * customTimeScale))) {
HXLINE(  25)							return HX_("bad",c5,b1,4a,00);
            						}
            						else {
HXLINE(  26)							if ((noteDiff < (( (Float)(-135) ) * customTimeScale))) {
HXLINE(  27)								return HX_("shit",c0,cf,52,4c);
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  28)		return HX_("sick",be,8c,53,4c);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Ratings_obj,CalculateRating,return )


Ratings_obj::Ratings_obj()
{
}

bool Ratings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"CalculateRating") ) { outValue = CalculateRating_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Ratings_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Ratings_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Ratings_obj::__mClass;

static ::String Ratings_obj_sStaticFields[] = {
	HX_("CalculateRating",03,56,40,d1),
	::String(null())
};

void Ratings_obj::__register()
{
	Ratings_obj _hx_dummy;
	Ratings_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Ratings",96,8d,b4,2a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Ratings_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Ratings_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Ratings_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Ratings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Ratings_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

